  const express = require('express');
  const cors = require('cors');
  const multer = require('multer');
  const { exec } = require('child_process');const admin = require('firebase-admin');
  const serviceAccount = require('./malware-analysis-7dadc-firebase-adminsdk-10hif-8cf592471d.json');

  const upload = multer({ dest: 'uploads/', limits: { fileSize: 1000000 } });
  const app = express();
  const PORT = process.env.PORT || 5000;

  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: 'https://malware-analysis-7dadc-default-rtdb.firebaseio.com/'
  });

  
  app.use(cors());

  app.post('/scan', upload.single('file'), async (req, res) => {
    try {
      const { path: filePath, originalname: fileName } = req.file;
      const scanResult = await executeClamScan(filePath);
      
      if (scanResult.clean) {
        saveDataToFirebase(fileName, 'Clean');
        res.status(200).json({ message: 'Clean' });
      } else {
        saveDataToFirebase(fileName, `Infected with ${scanResult.virusName}`);
        res.status(200).json({ message: `Infected with ${scanResult.virusName}` });
      }
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.get('/data', async (req, res) => {
    try {
      const messages = await retrieveDataFromFirebase();
      res.status(200).json({ messages });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
  });
  // async function executeClamScan(filePath) {
  //   return new Promise((resolve, reject) => {
  //     exec(`"C:\\Program Files\\ClamAV\\clamdscan" -v "D:\\Github\\Sawapandeep\\Malware_scanner-backend\\${filePath}"`, (error, stdout, stderr) => {
  //       if (stderr) {
  //         console.error(`exec error: ${stderr}`);
  //         reject(new Error('Internal server error inside'));
  //       } else {
  //         if (stdout.includes('OK')) {
  //           resolve({ clean: true });
  //         } else {
  //           const parts = stdout.split(':');
  //           const virusName = parts[2].split('FOUND')[0].trim();
  //           resolve({ clean: false, virusName });
  //         }
  //       }
  //     });
  //   });
  // }

  async function executeClamScan(filePath) {
    return new Promise((resolve, reject) => {
      exec(`cd C:\\Program Files\\ClamAV && clamdscan.exe -v D:\\Github\\Sawapandeep\\Malware_Analysis_Backend\\${filePath}`, (error, stdout, stderr) => {
        if (stderr) {
          console.error(`exec error: ${stderr}`);
          reject(new Error('Internal server error inside'));
        } else {
          if (stdout.includes('OK')) {
            resolve({ clean: true });
          } else {
            const parts = stdout.split(':');
            const virusName = parts[2].split('FOUND')[0].trim();
            resolve({ clean: false, virusName });
          }
        }
      });
    });
  }

  async function saveDataToFirebase(fileName, message) {
    const db = admin.database();
    const ref = db.ref('Scan_Results');
    const newMessageRef = ref.push();
    const options = { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
    const timestamp = new Date().toLocaleString('en-US', options);
    await newMessageRef.set({
      file_name: fileName,
      message,
      timestamp
    });
  }

  async function retrieveDataFromFirebase() {
    const db = admin.database();
    const ref = db.ref('Scan_Results');

    return new Promise((resolve, reject) => {
      ref.once('value', (snapshot) => {
        const messages = snapshot.val();
        resolve(messages);
      }, (error) => {
        reject(error);
      });
    });
  }
